// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Steven Poon",
            "url": "https://github.com/RYANCOAL9999",
            "email": "lmf242003@gmail.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/game_logs": {
            "get": {
                "description": "Fetches a list of game logs, allowing optional filtering by player ID, action, start time, end time, and limit. If more than one log is found, returns the first log. Returns a list of logs otherwise.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "game_logs"
                ],
                "summary": "Retrieve game logs",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Filter logs by player ID",
                        "name": "player_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter logs by action",
                        "name": "action",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Start time for filtering logs (format: YYYY-MM-DDTHH:MM:SSZ)",
                        "name": "start_time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "End time for filtering logs (format: YYYY-MM-DDTHH:MM:SSZ)",
                        "name": "end_time",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Limit the number of logs returned",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of game logs matching the criteria",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.GameLog"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request due to invalid query parameters",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Adds a new game log entry with the provided details. The request body must contain the player ID, action, timestamp, and details. Returns the ID of the newly created log entry if successful.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "game_logs"
                ],
                "summary": "Create a game log",
                "parameters": [
                    {
                        "description": "Details of the game log to be created",
                        "name": "game_log",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.GameLog"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Game log created successfully, returns the ID of the new game log",
                        "schema": {
                            "$ref": "#/definitions/models.CreateResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request due to invalid input data",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.CreateResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                }
            }
        },
        "models.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "models.GameLog": {
            "type": "object",
            "required": [
                "action",
                "details",
                "player_id"
            ],
            "properties": {
                "action": {
                    "type": "string"
                },
                "details": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "player_id": {
                    "type": "integer"
                },
                "timestamp": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             ":8084",
	BasePath:         "/v2",
	Schemes:          []string{},
	Title:            "Game Log Collector API",
	Description:      "This is a game log collector server.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
