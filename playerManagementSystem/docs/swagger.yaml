definitions:
  models.Level:
    properties:
      id:
        type: integer
      lv:
        type: integer
      name:
        type: string
    required:
    - lv
    - name
    type: object
  models.PlayerRank:
    properties:
      id:
        type: integer
      lv:
        type: integer
      name:
        type: string
    type: object
info:
  contact:
    name: Steven Poon
    url: https://github.com/RYANCOAL9999
    email: lmf242003@gmail.com    
  description: This is a player management system server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Player Management System API
  version: "1.0"
paths:
  /levels:
    get:
      consumes:
      - application/json
      description: Retrieve a list of levels from the database.
      produces:
      - application/json
      responses:
        "200":
          description: A list of levels
          schema:
            items:
              $ref: '#/definitions/models.Level'
            type: array
        "500":
          description: Internal server error
          schema: {}
      summary: List levels
      tags:
      - levels
    post:
      consumes:
      - application/json
      description: Create a new level in the database using the provided level details.
      parameters:
      - description: Level details to be created
        in: body
        name: level
        required: true
        schema:
          $ref: '#/definitions/models.Level'
      produces:
      - application/json
      responses:
        "201":
          description: Level created successfully with the generated ID
          schema:
            type: number
        "400":
          description: Bad request due to invalid input
          schema: {}
        "500":
          description: Internal server error
          schema: {}
      summary: Create a new level
      tags:
      - levels
  /players:
    get:
      consumes:
      - application/json
      description: Retrieve a list of players and their ranks from the database.
      produces:
      - application/json
      responses:
        "200":
          description: A list of players with their ranks
          schema:
            items:
              $ref: '#/definitions/models.PlayerRank'
            type: array
        "500":
          description: Internal server error
          schema: {}
      summary: List players
      tags:
      - players
    post:
      consumes:
      - application/json
      description: Create a new player in the database using the provided player details.
      parameters:
      - description: Player details to be created
        in: body
        name: player
        required: true
        schema:
          $ref: '#/definitions/models.PlayerRank'
      produces:
      - application/json
      responses:
        "201":
          description: Player created successfully with the generated ID
          schema:
            type: number
        "400":
          description: Bad request due to invalid input
          schema: {}
        "500":
          description: Internal server error
          schema: {}
      summary: Create a new player
      tags:
      - players
    put:
      consumes:
      - application/json
      description: Update the details of an existing player in the database using
        the provided player information.
      parameters:
      - description: Player details to be updated
        in: body
        name: player
        required: true
        schema:
          $ref: '#/definitions/models.PlayerRank'
      produces:
      - application/json
      responses:
        "200":
          description: Player updated successfully
          schema:
            type: string
        "400":
          description: Bad request due to invalid input
          schema: {}
        "500":
          description: Internal server error
          schema: {}
      summary: Update player details
      tags:
      - players
  /players/{id}:
    delete:
      consumes:
      - application/json
      description: Remove a player from the database using the provided player ID.
      parameters:
      - description: Player ID to be deleted
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Player deleted successfully
          schema:
            type: string
        "400":
          description: Invalid ID supplied
          schema: {}
        "500":
          description: Internal server error
          schema: {}
      summary: Delete a player
      tags:
      - players
    get:
      consumes:
      - application/json
      description: Get details of a specific player identified by their ID from the
        database.
      parameters:
      - description: Player ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Player details
          schema:
            $ref: '#/definitions/models.PlayerRank'
        "400":
          description: Invalid ID supplied
          schema: {}
        "500":
          description: Internal server error
          schema: {}
      summary: Retrieve a player by ID
      tags:
      - players
swagger: "2.0"
